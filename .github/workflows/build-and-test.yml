name: Build and test

on:
  push:
    branches: [ "main" , "master", "compiler-option-testing"]
  pull_request:
    branches: [ "main" , "master"]
  workflow_dispatch:

env:
  CMAKE_BUILD_TYPE: Release
  AUTOCONF_TEST_TARGET:

jobs:

  cmake-build:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    permissions:
      contents: write
      packages: write
    container:
      # relies on repository name being all lower case
      image: ghcr.io/${{ github.repository }}
#      credentials:
#        username: ${{ github.actor }}
#        password: ${{ secrets.GITHUB_TOKEN }}
#    defaults:
#      run:
#        shell: bash -el {0}
    strategy:
      matrix:
        cmake-options:
          - ""
          - "-DFORTRAN_INTEGER8=OFF"
          - "-DCMAKE_Fortran_FLAGS=-std=f2023"

    steps:
    - uses: actions/checkout@v3
    - name: Check existence of build configuration file
      id: check_configuration
      uses: andstor/file-existence-action@v1
      with:
        files: "CMakeLists.txt"

#    - name: ccache
#      uses: hendrikmuhs/ccache-action@v1.2

    - name: Configure CMake
      if: steps.check_configuration.outputs.files_exists == 'true'
      run: PATH=/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.CMAKE_BUILD_TYPE}} ${{ matrix.cmake-options }} # -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build
      if: steps.check_configuration.outputs.files_exists == 'true'
      run: /opt/conda/bin:PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin cmake --build ${{github.workspace}}/build --config ${{env.CMAKE_BUILD_TYPE}}

    - name: Test
      if: steps.check_configuration.outputs.files_exists == 'true'
      run: cd ${{github.workspace}}/build && PATH=/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ctest -C ${{env.CMAKE_BUILD_TYPE}} -VV || ctest -C ${{env.CMAKE_BUILD_TYPE}} --rerun-failed --output-on-failure -VV

    - name: Build doxygen
      run: cmake --build ${{github.workspace}}/build --target DependencyManagerDocs
